<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Geometry x:Key="Maximized11Path">M45 50h50a15 15 0 0115 15v50a15 15 0 01-15 15h-50a15 15 0 01-15-15v-50a15 15 0 0115-15m0 10a5 5 0 00-5 5v50a5 5 0 005 5h50a5 5 0 005-5v-50a5 5 0 00-5-5zM50 40a15 15 0 0115-10h35a30 30 0 0130 30v35a15 15 0 01-10 15V60a20 20 0 00-20-20z</Geometry>
  <Geometry x:Key="Maximize11Path">M0 2C0 0.9 0.9 0 2 0L8 0C9.1 0 10 0.9 10 2L10 8C10 9.1 9.1 10 8 10 L2 10C0.9 10 0 9.1 0 8ZM1 2C1 1.5 1.5 1 2 1L8 1C8.5 1 9 1.5 9 2L9 8C9 8.5 8.5 9 8 9L2 9C1.5 9 1 8.5 1 8Z</Geometry>
  <Geometry x:Key="MaximizedPath">M2 0H10V8H8V10H0V2H2M8 1V7H9V1H3V2H8zM1 3V9H7V3H1z</Geometry>
  <Geometry x:Key="MaximizePath">M0 0H10V10H0zM1 1H9V9H1z</Geometry>
  <Geometry x:Key="PinPath">M16 3L10 9C10 9 6 8 3 11c0 0 10 10 10 10c3-3 2-7 2-7L21 8L16 3ZM1 23L8 16M14 1l9 9</Geometry>
  <Geometry x:Key="RemovePath">M5.8 20.3L4 8h16L18.2 20.3A2 2 0 0116.3 22H7.7A2 2 0 0 1 5.8 20.3ZM21 4H16V3A1 1 0 0015 2H9A1 1 0 008 3v1H3a1 1 0 000 2h18a1 1 0 000-2Z</Geometry>
  <Geometry x:Key="AddPath">M66 42H54V30a6 6 0 00-12 0v12H30a6 6 0 000 12h12v12a6 6 0 0012 0V54h12a6 6 0 000-12Zm30 6a48 48 0 100 .01zM12 48a36 36 0 110 .01z</Geometry>
  <Geometry x:Key="SavePath">M0 0v20h20V2l-2-2zm1 1h4v6h11V1h1.7L19 2.4V19h-2V9H3v10H1zm5 0h9v5H6zm7 1v3h1V2zm-9 8h12v9H4z</Geometry>
  <Geometry x:Key="SaveNewPath">M0 0v20h20V2l-2-2zm1 1h4v6h11V1h1.7L19 2.4V19h-2V9H3v10H1zm5 0h9v5H6zm7 1v3h1V2zm-9 8h12v9H4zM7.5 14v1h5v-1zM9.5 12v5h1v-5h-1Z</Geometry>
  <Geometry x:Key="EditPath">M65 240H0v-65L175 0l65 65L65 240zM20 220h37L180 97l-37-37L20 183v37zM157 46l37 37 18-18-37-37-18 18z</Geometry>
  <Geometry x:Key="SearchPath">M5 13a9 9 0 110 .01zM20 20 28 28</Geometry>
  <Geometry x:Key="MenuPath">M2 2a2 2 0 110-.001zM2 8a2 2 0 110-.001zM2 14a2 2 0 110-.001z</Geometry>
  <Geometry x:Key="SettingsPath">M91 44L86 20H74L69 44l-7 3L42 34l-9 8l13 20l-2 7l-24 5v12l24 5l3 8L34 119l8 8L62 114l8 3l4 23h12l5-24l8-3l20 13l8-8L114 98l3-8l23-4V74L116 69l-3-8L126 41l-8-8L98 46l-7-2ZM94 10l5 24L120 21l20 20L126 62l24 4v28l-24 5l14 21l-20 20L99 126l-5 24H66l-5-24L40 139L20 120L34 99L10 94V66L34 61L21 40L41 20l21 14L66 10h28Zm6 70a20 20 0 1 1 0-0.01zM70 80a10 10 0 1 0 0-0.01z</Geometry>
  <Geometry x:Key="ProcessPath">M15 20h130l5 5v65h-10V60H20v70h70v10H15l-5-5v-110l5-5zm5 30h120V30H20v20zm50 70v-11a16 16 0 0 1-5-3l-9 5l-5-9l9-5a16 16 0 0 1 0-5l-9-5l5-9l9 5c2-1 3-2 5-3v-10h10v11a15 15 0 0 1 5 3l9-5l5 9l-9 5a16 16 0 0 1 0 5l9 5l-5 9l-9-5a18 18 0 0 1-5 3v11H70zm-2-25a7 7 0 110 .001zm52 55v-11a16 16 0 0 1-5-3l-9 5l-5-9l9-5a16 16 0 0 1 0-5l-9-5l5-9l9 5c2-1 3-2 5-3v-11h10v11a15 15 0 0 1 5 3l9-5l5 9l-9 5a16 16 0 0 1 0 5l9 5l-5 9l-9-5a18 18 0 0 1-5 3v11h-10zm-2-25a7 7 0 110 .001z</Geometry>
  <Geometry x:Key="WindowPath">M12 5a1 1 0 110 .001zm3 0a1 1 0 110 .001zm3 0a1 1 0 110 .001zM20 1H4a3 3 0 00-3 3v16a3 3 0 003 3h16a3 3 0 003-3V4a3 3 0 00-3-3zm1 19a1 1 0 01-1 1H4a1 1 0 01-1-1V9h18zm0-13H3V4a1 1 0 011-1h16a1 1 0 011 1z</Geometry>
  <Geometry x:Key="HistoryPath">M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z</Geometry>
  <Geometry x:Key="ShortcutPath">M5.8 41.5s10-13.6 23.5-10.5v9.1l15.6-15.5-15.6-15.1v10.3S5.8 23.1 5.8 41.5z</Geometry>
  <Geometry x:Key="OverviewPath">M20 20H4V18h1v1h14V5H18V4h2zm1-13v1h1v14H8v-1H7v2h16V7zM1 1v16h16V1zm5 15H2V12h4zm0-5H2V7h4zm0-5H2V2h4zm5 10H7V12h4zm0-5H7V7h4zm0-5H7V2h4zm5 10h-4v-4h4zm0-5H12V7h4zm0-5H12V2h4z</Geometry>
  <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="{DynamicResource c1}" Offset="0.0" />
    <GradientStop Color="{DynamicResource c2}" Offset="1.0" />
  </LinearGradientBrush>
  <Style x:Key="SimpleButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="2" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CheckBoxFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="15,0,0,0" Stroke="{DynamicResource b0}" StrokeThickness="1" StrokeDashArray="1 2" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BorderAnimation" TargetType="{x:Type Border}">
    <Style.Triggers>
      <Trigger Property="Visibility" Value="Visible">
        <TriggerBase.EnterActions>
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1.0" To="0.0" Duration="0:0:4" />
            </Storyboard>
          </BeginStoryboard>
        </TriggerBase.EnterActions>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ListItemEmptyStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border BorderThickness="0" Background="{TemplateBinding Control.Background}" Margin="0,0,5,5">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomListItemStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Margin" Value="15,0" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}" SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="FrameworkElement.Cursor" Value="Hand" />
              <Setter TargetName="Bd" Value="{DynamicResource bg6}" Property="Border.Background" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource bg8}" Property="Border.Background" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomBlueButtonStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="Background" Value="{DynamicResource u1}" />
    <Setter Property="Foreground" Value="{DynamicResource u3}" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Padding" Value="8,0,8,0" />
    <Setter Property="Height" Value="30" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Name="Grid" Cursor="Hand">
            <Border Name="Border" CornerRadius="3" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Padding="{TemplateBinding Control.Padding}" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
              <Setter Value="{DynamicResource u2}" Property="Background" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource u2}" Property="Background" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" />
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomWhiteButtonStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}" />
    <Setter Property="Background" Value="{DynamicResource b1}" />
    <Setter Property="Foreground" Value="{DynamicResource b0}" />
    <Setter Property="BorderBrush" Value="{DynamicResource b3}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FontFamily" Value="{StaticResource Font1}" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Height" Value="30" />
    <Setter Property="Padding" Value="8,0,8,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Name="Grid" Cursor="Hand">
            <Border Name="Border" CornerRadius="3" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Padding="{TemplateBinding Control.Padding}" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
              <Setter Value="{DynamicResource b2}" Property="Background" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource b2}" Property="Background" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" />
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomCircleWhiteButtonStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource u1}" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="8,0,8,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Name="Grid" Cursor="Hand" VerticalAlignment="Center" HorizontalAlignment="Center">
            <Canvas Height="16" Width="16">
              <Ellipse Name="Ellipse" Height="15" Width="15" Fill="#00FFFFFF" StrokeThickness="1" Stroke="{DynamicResource u1}" />
              <Path Name="CheckMark" Stroke="{DynamicResource u1}" StrokeThickness="1" SnapsToDevicePixels="False" Data="M5 5L10 10M5 10L10 5" />
            </Canvas>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
              <Setter TargetName="Ellipse" Value="{DynamicResource b3}" Property="Shape.Fill" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Ellipse" Value="{DynamicResource b3}" Property="Shape.Fill" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" />
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomRedButtonStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource r0}" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Height" Value="30" />
    <Setter Property="Padding" Value="8,0,8,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Name="Grid" Cursor="Hand">
            <Border Name="Border" CornerRadius="3" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Padding="{TemplateBinding Control.Padding}" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource r0}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" />
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomRedButtonWithBorderStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource r0}" />
    <Setter Property="BorderBrush" Value="{DynamicResource b3}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Height" Value="30" />
    <Setter Property="Padding" Value="8,0,8,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Name="Grid" Cursor="Hand">
            <Border Name="Border" CornerRadius="3" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Padding="{TemplateBinding Control.Padding}" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource r0}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter Value="{DynamicResource r0}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" />
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomTransparentButtonStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource u1}" />
    <Setter Property="BorderBrush" Value="#00FFFFFF" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Height" Value="30" />
    <Setter Property="Padding" Value="8,0,8,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Name="Grid" Cursor="Hand">
            <Border Name="Border" CornerRadius="3" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Padding="{TemplateBinding Control.Padding}" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource u1}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" />
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="AboveControlLabel" TargetType="{x:Type Label}">
    <Setter Property="FontFamily" Value="{StaticResource Font1}" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="TextBlock.FontWeight" Value="SemiBold" />
    <Setter Property="Foreground" Value="{DynamicResource fg1}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Margin" Value="0,0,0,3" />
  </Style>
  <Style x:Key="BelowControlLabel" TargetType="{x:Type Label}">
    <Setter Property="FontFamily" Value="{StaticResource Font1}" />
    <Setter Property="FontSize" Value="11" />
    <Setter Property="Foreground" Value="{DynamicResource g0}" />
  </Style>
  <Style x:Key="SimpleCheckBox" TargetType="{x:Type CheckBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
    <Setter Property="Background" Value="#00FFFFFF" />
    <Setter Property="Foreground" Value="{DynamicResource fg1}" />
    <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="FontFamily" Value="{StaticResource Font1}" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <StackPanel Background="{TemplateBinding Control.Background}">
            <BulletDecorator Margin="0,0,5,0">
              <BulletDecorator.Bullet>
                <Grid Width="16" Height="16">
                  <Border Name="Border" Background="{DynamicResource bg1}" BorderBrush="{DynamicResource g0}" BorderThickness="2" CornerRadius="2" />
                  <Path Name="CheckMark" Stroke="{DynamicResource g2}" StrokeThickness="2" SnapsToDevicePixels="False" Data="M3 8L7 12M7 12L13 5" />
                  <Path Name="CheckMark2" Stroke="{DynamicResource g2}" StrokeThickness="8" SnapsToDevicePixels="True" Data="M8 4L8 12" />
                </Grid>
              </BulletDecorator.Bullet>
              <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="5,0,0,0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
            </BulletDecorator>
          </StackPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="CheckMark2" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="Border" Value="{DynamicResource bg1}" Property="Border.Background" />
              <Setter TargetName="Border" Value="{DynamicResource g0}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
              <Setter TargetName="CheckMark2" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="Border" Value="{DynamicResource u1}" Property="Border.Background" />
              <Setter TargetName="Border" Value="{DynamicResource u1}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="{x:Null}">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="CheckMark2" Property="Visibility" Value="Visible" />
              <Setter TargetName="Border" Value="{DynamicResource u1}" Property="Border.Background" />
              <Setter TargetName="Border" Value="{DynamicResource u1}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="FrameworkElement.Cursor" Value="Hand" />
              <Setter Value="{DynamicResource bg1}" Property="Background" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Border" Value="{DynamicResource u1}" Property="Border.Background" />
              <Setter TargetName="Border" Value="{DynamicResource u1}" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
    <Setter Property="Background" Value="{DynamicResource bg1}" />
    <Setter Property="Foreground" Value="{DynamicResource fg1}" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="FontFamily" Value="{StaticResource Font1}" />
    <Setter Property="Height" Value="30" />
    <Setter Property="Padding" Value="10,6,10,4" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Name="border" BorderBrush="{DynamicResource b3}" BorderThickness="1" CornerRadius="3" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True" ClipToBounds="True">
            <Grid Margin="-2">
              <Border Background="#00FFFFFF" BorderBrush="{DynamicResource bb5}" BorderThickness="0,0.5,0,0" Margin="0" CornerRadius="3">
                <UIElement.Effect>
                  <DropShadowEffect ShadowDepth="0" BlurRadius="5" />
                </UIElement.Effect>
              </Border>
              <ScrollViewer Name="PART_ContentHost" Margin="0,3,0,0" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter TargetName="border" Value="{DynamicResource u2}" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Border BorderBrush="{DynamicResource r0}" BorderThickness="2" CornerRadius="4" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
              <AdornedElementPlaceholder Name="MyAdorner" />
            </Border>
            <TextBlock Grid.Row="1" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Bottom" Foreground="{DynamicResource r0}" FontSize="8pt" FontFamily="{DynamicResource Font1}" Margin="2,4,0,0" Text="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type Border}" TargetType="{x:Type Border}">
          <Setter Property="Border.CornerRadius" Value="3" />
          <Setter Property="BorderBrush" Value="{DynamicResource g0}" />
          <Setter Property="BorderThickness" Value="1" />
        </Style>
      </ResourceDictionary>
    </Style.Resources>
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="True">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0,0,0,15" />
      </Trigger>
      <Trigger Property="Validation.HasError" Value="False">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0,0,0,0" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SimpleBasswordBox" TargetType="{x:Type PasswordBox}">
    <Setter Property="Background" Value="{DynamicResource bg1}" />
    <Setter Property="Foreground" Value="{DynamicResource fg1}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Padding" Value="5,2" />
    <Setter Property="FontSize" Value="11" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <Grid>
            <Border Name="border" BorderBrush="{DynamicResource bb1}" BorderThickness="1" Background="{DynamicResource bg1}" SnapsToDevicePixels="True" ClipToBounds="True" Height="30" CornerRadius="3">
              <Grid Margin="-2">
                <Border Background="#00FFFFFF" BorderBrush="{DynamicResource bb5}" BorderThickness="0,0.5,0,0" Margin="0" CornerRadius="3">
                  <UIElement.Effect>
                    <DropShadowEffect ShadowDepth="0" BlurRadius="5" />
                  </UIElement.Effect>
                </Border>
                <ScrollViewer Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Margin="7" />
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter TargetName="border" Value="{DynamicResource u2}" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition Width="20" />
      </Grid.ColumnDefinitions>
      <Rectangle Name="Rectangle" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="{DynamicResource bg1}" RadiusX="5" RadiusY="5" Stroke="{DynamicResource NormalBorderBrush}" />
      <Border Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" />
      <Path Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{DynamicResource u1}">
        <Path.Data>
          <GeometryGroup>
            <LineGeometry StartPoint="0,0" EndPoint="4,4" />
            <LineGeometry StartPoint="4,4" EndPoint="8,0" />
          </GeometryGroup>
        </Path.Data>
      </Path>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="Rectangle" Value="{DynamicResource bg1}" Property="Shape.Fill" />
        <Setter TargetName="Arrow" Value="{DynamicResource u1}" Property="Shape.Stroke" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true" />
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
    <Border Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Control.Background}" BorderThickness="0,0,0,0" />
  </ControlTemplate>
  <Style x:Key="SimpleComboBox" TargetType="{x:Type ComboBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource fg1}" />
    <Setter Property="Height" Value="30" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource SimpleComboBoxItem}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <ToggleButton Name="ToggleButton" Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" Focusable="False" ClickMode="Press" BorderThickness="0" IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" />
            <ContentPresenter Name="ContentSite" HorizontalAlignment="Left" Margin="10,3,23,3" VerticalAlignment="Center" Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}" IsHitTestVisible="False" />
            <TextBox Name="PART_EditableTextBox" Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,0" VerticalAlignment="Center" Focusable="True" Background="#00FFFFFF" BorderThickness="0,0,0,0" IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}" Height="30" Style="{x:Null}" />
            <Popup Name="Popup" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" Placement="Bottom" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
              <Grid Name="DropDown" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" SnapsToDevicePixels="True" Margin="5">
                <Border Name="DropDownBorder" Background="{DynamicResource bg1}" BorderBrush="#00FFFFFF" BorderThickness="1" CornerRadius="0" Margin="10">
                  <UIElement.Effect>
                    <DropShadowEffect Color="{DynamicResource c3}" ShadowDepth="0" BlurRadius="5" Direction="270" />
                  </UIElement.Effect>
                </Border>
                <Border>
                  <ScrollViewer SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                  </ScrollViewer>
                </Border>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="False">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="True">
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
              <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="True">
              <Setter Property="IsTabStop" Value="False" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="FrameworkElement.Cursor" Value="Hand" />
              <Setter Property="Background" Value="#FFFF8C00" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Border BorderBrush="{DynamicResource r0}" BorderThickness="2" CornerRadius="3" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
              <AdornedElementPlaceholder Name="MyAdorner" />
            </Border>
            <TextBlock Name="test" Grid.Row="1" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Bottom" Foreground="{DynamicResource r0}" FontSize="8pt" FontFamily="{DynamicResource Font1}" Margin="2,4,0,0" Text="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="True">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0,0,0,20" />
      </Trigger>
      <Trigger Property="Validation.HasError" Value="False">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0,0,0,0" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SimpleComboBoxItem" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Height" Value="30" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Grid SnapsToDevicePixels="True">
            <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="10,0,10,0" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ComboBoxItem.IsHighlighted" Value="True">
              <Setter Value="{DynamicResource bg8}" TargetName="Border" Property="Border.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Border" Value="{DynamicResource bg8}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
    <Setter Property="Background" Value="{StaticResource bg1}" />
    <Setter Property="Foreground" Value="{StaticResource u1}" />
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border Name="Border" BorderThickness="1" CornerRadius="0" Background="{DynamicResource bg1}" BorderBrush="{StaticResource NormalBorderBrush}">
            <StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Border" Value="{DynamicResource bg1}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border Name="Bd" Width="210" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True" Uid="Border_38">
            <Grid>
              <TextBlock Text="{TemplateBinding HeaderedItemsControl.Header}" Padding="10,7,0,0" Height="30" Foreground="{DynamicResource u1}" VerticalAlignment="Center" FontSize="13" FontFamily="{DynamicResource Font1}" />
              <TextBlock Text="{TemplateBinding MenuItem.InputGestureText}" Padding="15,9,0,0" Height="30" Width="60" Foreground="{DynamicResource g0}" VerticalAlignment="Center" HorizontalAlignment="Right" FontSize="11" FontFamily="{DynamicResource Font1}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsHighlighted" Value="True">
              <Setter TargetName="Bd" Value="{DynamicResource bg5}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MenuItemWithPinIcon" TargetType="{x:Type MenuItem}">
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border Name="Bd" Width="100" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True" Uid="Border_38">
            <StackPanel Orientation="Horizontal" Margin="10,0">
              <Path Width="14" Height="14" Stroke="{DynamicResource u1}" StrokeThickness="2" Stretch="Uniform" Data="{StaticResource PinPath}"/>
              <TextBlock Text="{TemplateBinding HeaderedItemsControl.Header}" Padding="5,8,0,0" Height="30" VerticalAlignment="Center" FontSize="13" FontFamily="{DynamicResource Font1}" Foreground="{TemplateBinding Control.Foreground}" />
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsHighlighted" Value="True">
              <Setter TargetName="Bd" Value="{DynamicResource bg5}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MenuItemWithDeleteIcon" TargetType="{x:Type MenuItem}">
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border Name="Bd" Width="100" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True" Uid="Border_38">
            <StackPanel Orientation="Horizontal" Margin="10,0">
              <Path Width="14" Height="14" Fill="Red" Stretch="Uniform" Data="{StaticResource RemovePath}"/>
              <TextBlock Text="{TemplateBinding HeaderedItemsControl.Header}" Padding="5,8,0,0" Height="30" VerticalAlignment="Center" FontSize="13" FontFamily="{DynamicResource Font1}" Foreground="{TemplateBinding Control.Foreground}" />
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsHighlighted" Value="True">
              <Setter TargetName="Bd" Value="{DynamicResource bg5}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MenuItemWithPencilIcon" TargetType="{x:Type MenuItem}">
    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border Name="Bd" Width="100" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True" Uid="Border_38">
            <StackPanel Orientation="Horizontal" Margin="10,0">
              <Path Width="14" Height="14" Stroke="{DynamicResource u1}" Stretch="Uniform" Data="{StaticResource EditPath}"/>
              <TextBlock Text="{TemplateBinding HeaderedItemsControl.Header}" Padding="5,8,0,0" Height="30" VerticalAlignment="Center" FontSize="13" FontFamily="{DynamicResource Font1}" Foreground="{TemplateBinding Control.Foreground}" />
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsHighlighted" Value="True">
              <Setter TargetName="Bd" Value="{DynamicResource bg5}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CustomTabItemStyle" TargetType="{x:Type TabItem}">
    <Setter Property="Height" Value="50" />
    <Setter Property="Background" Value="{DynamicResource bg4}" />
    <Setter Property="Foreground" Value="{DynamicResource fg1}" />
    <Setter Property="BorderThickness" Value="0,0,0,0" />
    <Setter Property="Padding" Value="10,0,0,0" />
    <Setter Property="Width" Value="128" />
    <Setter Property="FontSize" Value="{DynamicResource fs1}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid>
            <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" />
            <ContentPresenter Name="ContentSite" Cursor="Hand" ContentSource="Header" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="Center" RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Border" Value="{DynamicResource bg6}" Property="Border.Background" />
              <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="False">
              <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="TabItem.IsSelected" Value="True">
              <Setter TargetName="Border" Value="{DynamicResource bg1}" Property="Border.Background" />
              <Setter TargetName="Border" Value="{DynamicResource t8}" Property="Border.BorderBrush" />
              <Setter TargetName="Border" Property="Border.BorderThickness" Value="3,0,0,0" />
              <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="Bold" />
              <Setter TargetName="ContentSite" Value="{DynamicResource fg1}" Property="Control.Foreground" />
            </Trigger>
            <Trigger Property="TabItem.IsSelected" Value="False">
              <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="Bold" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HintLabel" TargetType="{x:Type Label}">
    <Setter Property="Foreground" Value="{DynamicResource fg1}" />
    <Setter Property="FontFamily" Value="{StaticResource Font1}" />
    <Setter Property="FontSize" Value="11" />
    <Setter Property="Padding" Value="5,2,0,0" />
    <Setter Property="Margin" Value="0" />
  </Style>
  <Style x:Key="CustomScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Border CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid Background="{TemplateBinding Background}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" />
              <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="1" Grid.Row="0" Opacity="{DynamicResource o1}" BorderThickness="0" Background="{DynamicResource bg1}" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
              <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Column="0" Grid.Row="1" Opacity="{DynamicResource o1}" BorderThickness="0" Background="{DynamicResource bg1}" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>